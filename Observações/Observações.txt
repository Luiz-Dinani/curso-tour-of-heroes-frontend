Módulos inseridos no app.module.ts podem ser usados globalmente sem precisar importar mais de uma vez


Pipes
  São modificadores de um atributo de um component no html, como seria o caso do méto do ToUpper() no C#

  <h2>{{ hero.name | uppercase }} Details</h2>
    O | uppercase faz com que o atributo name da interface Hero seja exibido em maiúsculo


Two-Way Data Binding
  Quando quisermos que o usuário possa fazer mudanças no nosso component que pode já ter tido um valor definido por nós previamente
  <div>
    <label for="name">Hero's Name:</label>
    <input id="name" placeholder="Insert Hero's Name" [(ngModel)]="hero.name">
  </div>

  OBS: Para usar o ngModel é necessário importar o FormsModule no app.module.ts

  Nesse caso o nome que o usuário inserir substituirá o "Wolverine" previamente definido por nós
  Mostramos o valor do atributo + usuário pode mudar o valor do atributo = Two Data Binding



Quando temos uma propriedade em um component e quisermos alterar uma propriedade dele em outro component usamos colchetes na tag do component
O atributo que queremos mudar deve ter o Decorator @Input() para que isso funcione

  Dentro do HeroesComponent estamos chamando o component HeroDetail que por sua vez possui um atributo chamado hero, que receberá o valor de selectedHero
    <app-hero-detail [hero]="selectedHero"></app-hero-detail>

  Dentro do HeroDetail o atributo hero tem o Decorator @Input()
    export class HeroDetailComponent {
      @Input()
      hero?: Hero
    }

Observable
  É o conceito de pattern que você já conhece, mas aqui ele é um método usado para fazer requisições assíncronas, pelo que eu entendi ele é tipo uma task
  Dentro da nossa HeroService nós temos um método que retorna um Observable de uma lista de Heroes (Me parece muito com um Task<List<Heroes>>)

  export class HeroService {

    getHeroes(): Observable<Hero[]>{
      const heroes = of(HEROES);
      return heroes;
    }
  }

  O of é o que torna a lista HEROES um Observable, ele vem do pacote rxjs
  Para lermos a lista retornada por esse método no nosso component precisamos nos inscrever no Observable (Igual o pattern design diz)

  getHeroes(): void {
    this.heroService.getHeroes().subscribe(
      heroes => this.heroes = heroes
    );
  }

  Após nos inscrever-mos usando o método subscribe usamos uma função anônima para atribuir o valor recebido da requisição Observada na nossa variavel heroes
  (this.heroes)


Lembra do AddScoped e AddSingleton da startup.cs?
  Então, eu finalmente aprendi a diferença entra elas:
    O AddSingleton vai criar uma única service para todo mundo que decida usar ela, então vamos supor que uma service singleton tenha uma variavel varA
      Se eu usar essa service singleton em uma service123 e alterar o valor da para varA = "Valor Alterado" ela terá esse valor em todas as services que usam a serviceSingleton
      Então quando eu for usar a varA na serviceABC o valor de varA será "Valor Alterado" e se eu fiz varA = "Valor Alterado Denovo" o valor de varA na service123 será também "Valor Alterado Denovo"

    O AddScoped faz com que isso não aconteça, criando uma intância de service nova para todo ESCOPO que ela for utilizada, então não importa o que eu fizer na serviceABC o valor de varA não será alterado na service123

  Me parece que o singleton é usado principalmente em classes de mensageria, para não haver diferença nas mensagens entre as services que estão lendo a fila









